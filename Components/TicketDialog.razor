@using MudBlazor
@using frontend.Models
@using frontend.Services

<MudDialog>
    <TitleContent>@DialogTitle</TitleContent>

    <DialogContent>
        <MudTextField @bind-Value="TicketTitle" Label="Ticket Name" Variant="Variant.Outlined" Required="true" />

        <MudSelect T="string" @bind-Value="SelectedUserId" Label="Performer" Variant="Variant.Outlined" Required="true">
            @if (IsLoading)
            {
                <MudSelectItem Value="@((string?)null)" Disabled="true">Loading...</MudSelectItem>
            }
            else if (Users.Count > 0)
            {
                @foreach (var user in Users)
                {
                    <MudSelectItem Value="@user.Id">@user.UserName</MudSelectItem>
                }
            }
            else
            {
                <MudSelectItem Value="@((string?)null)" Disabled="true">No users available</MudSelectItem>
            }
        </MudSelect>

        <MudTextField @bind-Value="TicketContent" Label="Content" Variant="Variant.Outlined" Lines="5" Required="true" />
        <MudDatePicker @bind-Date="ExpireDate" Label="Expire Date" Variant="Variant.Outlined" Required="true" />
        <MudNumericField T="int" @bind-Value="Weight" Label="Weight" Variant="Variant.Outlined" Min="1" Max="10" Required="true" />
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] public UserService UserService { get; set; } = default!;
    [Inject] public TicketService TicketService { get; set; } = default!;
    [CascadingParameter] public IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public string DialogTitle { get; set; } = "Ticket";
    [Parameter] public TicketModel? Ticket { get; set; }

    public string TicketTitle { get; set; } = string.Empty;
    public string SelectedUserId { get; set; } = string.Empty;
    public string TicketContent { get; set; } = string.Empty;
    public DateTime? ExpireDate { get; set; } = DateTime.UtcNow.AddDays(7); // âœ… changed to nullable
    public int Weight { get; set; } = 1;
    public string Zone { get; set; } = "Todo";

    public List<UserModel> Users { get; set; } = new();
    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await UserService.GetUsersAsync();
        }
        finally
        {
            IsLoading = false;
        }

        if (Ticket != null)
        {
            TicketTitle = Ticket.Title;
            SelectedUserId = Ticket.PerformerId;
            TicketContent = Ticket.Content;
            ExpireDate = Ticket.ExpireDate;
            Weight = Ticket.Weight;
            Zone = Ticket.Zone;
        }
    }

    private async Task Save()   // âœ… must be async
    {
        ExpireDate ??= DateTime.UtcNow.AddDays(7);
         // ðŸ”¹ Look up performer object from Users list
        var performer = Users.FirstOrDefault(u => u.Id == SelectedUserId);

        var newTicket = new TicketModel
        {
            Id = Ticket?.Id ?? string.Empty,
            Title = TicketTitle,
            PerformerId = SelectedUserId,
            PerformerName = performer?.UserName ?? string.Empty, // âœ… FIX
            Content = TicketContent,
            ExpireDate = ExpireDate.Value,
            Weight = Weight,
            Zone = Zone
        };

        if (string.IsNullOrEmpty(Ticket?.Id))
        {
            // ðŸš€ Create
            var created = await TicketService.CreateTicketAsync(newTicket);
            if (created != null)
            {
                MudDialog?.Close(DialogResult.Ok(created));
            }
        }
        else
        {
            // ðŸš€ Update
            await TicketService.UpdateTicketAsync(newTicket.Id, newTicket);
            MudDialog?.Close(DialogResult.Ok(newTicket));
        }
    }

    private void Cancel() => MudDialog?.Cancel();
}