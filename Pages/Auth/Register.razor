@page "/auth/register"
@layout PublicLayout
@using System.ComponentModel.DataAnnotations
@using frontend.Models
@inject AuthService AuthService

<div class="auth-container">
    <h3 class="title">Create Account</h3>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@

        <div class="form-group">
            <label>Username</label>
            <InputText @bind-Value="registerModel.Username" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Username)" />
        </div>

        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="registerModel.Email" class="form-control" type="email" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="form-group">
            <label>Password</label>
            <InputText @bind-Value="registerModel.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <div class="form-group">
            <label>Confirm Password</label>
            <InputText @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
            @(isSubmitting ? "Registering..." : "Register")
        </button>
    </EditForm>
</div>




@code {
    private RegisterModel registerModel = new();
    private string? successMessage;
    private string? errorMessage;
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            // Call the Register method in AuthService
            var result = await AuthService.Register(registerModel);

            if (result.StartsWith("âœ…"))
            {
                successMessage = result;  // Success message
            }
            else
            {
                errorMessage = result;  // Error message
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";  // Catch unexpected errors
        }

        isSubmitting = false;
    }
}